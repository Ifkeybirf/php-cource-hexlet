<?php

// CamelCase naming for class name!!
class SmartHuman
{
    public static $counter = 0;
    protected $name; // только внутри класса и его методов
    public $heihgt; // можно использовать отовсюду
    public $weight;
    //private - только внутри метода

    public static function getCounter()
    {
        return self::$counter();
    }
    public function getName()
    {
        return ucfirst($this->name);
    }

    public function sayName()
    {
        echo $this->getName(), PHP_EOL;
    }

    public function __construct()
    {
        self::$counter++; //self - текущий класс
        echo 'called Constructor' . PHP_EOL;
    }

    private function formatName(string $name): string
    {
        return ucfirst(strtolower($name));
    }
}

class Man extends SmartHuman
{
    function work()
    {
        echo 'Working...', PHP_EOL;
        parent::__construct();
    }
}

class Woman extends SmartHuman
{
    public function sing()
    {
        echo 'la la la', PHP_EOL;
    }
    public function getName()
    {
        //return parent::getName(); // TODO: Change the autogenerated stub
        return 'Mrs' . parent::getName();
    }
}

echo SmartHuman::$counter  . PHP_EOL;

$human1 = new SmartHuman('human1');
$human2 = new SmartHuman('human2');

print_r($human1);
print_r($human2);

/*
$human1->name = 'Vasya';
$human2->name = 'Petya';
*/

$human1->sayName();

SmartHuman::$counter = 100;

$Petya = new Man('petya');
$Sveta = new Woman('sveta');

$Sveta->sayName;

echo SmartHuman::$counter  . PHP_EOL;


class FooException extends Exception
{
}

function isEven($n) :bool
{
    if (!is_numeric($n)) {
        throw new FooException('input data is not a digit');
    }
    return ($n % 2 === 0);

}


$n = '12';
try {
    echo $n . ' is' . (isEven($n) ? 'even' : 'odd') . PHP_EOL;
}
catch (\FooException $e)
{
    echo $n , ' is wrong number';
}
